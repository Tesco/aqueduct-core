@Library("magic_pipe_jenkins_shared_library") _

properties([
buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '30')),
disableConcurrentBuilds(),
disableResume()
])

ansiColor('xterm') {

    node('jenkins-deployer') {

        def scmVars
        def properties
        def pipeReadUsername, pipeReadPassword, runscopePipeReadUsername, runscopePipeReadPassword
        String acrLoginToken = ""
        String registry = "${env.company}${env.project}${env.environment}acr${env.tag}.azurecr.io"

        stage("Git") {
            scmVars = checkout scm
        }

        stage("Authenticate") {
            acrLoginToken = authenticate([environment: env.environment, tag: env.tag,
                                          project: env.project, company: env.company,
                                          location: env.location]) {
                properties = databaseProperties()

                nexusUsername = getKubeSecret("nexus", "username")
                nexusPassword = getKubeSecret("nexus", "password")
                pipeReadUsername = getKubeSecret("pipe.read", "username")
                pipeReadPassword = getKubeSecret("pipe.read", "password")
                runscopePipeReadUsername = getKubeSecret("runscope.pipe.read", "username")
                runscopePipeReadPassword = getKubeSecret("runscope.pipe.read", "password")
                supportUsername = getKubeSecret("user.support", "username")
                supportPassword = getKubeSecret("user.support", "password")
            }
        }

        stage("Gradle Build") {
            if(scmVars.GIT_BRANCH == "master") {
                sh "./gradlew createRelease -Prelease.disableChecks"
            }
            sh "./gradlew assemble"
        }

        String integrationImage = "$registry/aqueduct-pipe:integration-${scmVars.GIT_COMMIT}"
        String stableImage = "$registry/aqueduct-pipe:stable-${scmVars.GIT_COMMIT}"
        String deployedImage = "$registry/aqueduct-pipe:latest"

        dir("deployment/k8s") {
            stash name: 'deployment-manifest', includes: 'aqueduct-pipe-deployment.yaml'
        }

        stage('Run Tests') {
            parallel(
                spotbugs: {
                    stage('Spot Bugs') {
                        sh "./gradlew spotbugsMain"
                        def spotbugs = scanForIssues tool: spotBugs(pattern: '**/spotbugs/main.xml')
                        publishIssues issues: [spotbugs]
                    }
                },
                pmd: {
                    stage('Pmd Analysis') {
                        sh "./gradlew pmdMain"
                        def pmd = scanForIssues tool: pmdParser(pattern: '**/pmd/main.xml')
                        publishIssues issues: [pmd]
                    }
                },
                owasp: {
                    stage('OWASP Scan') {
                        sh "./gradlew dependencyCheckAggregate"
                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/reports', reportFiles: 'dependency-check-report.html', reportName: 'Dependency Check', reportTitles: 'Dependency Check Report'])
                    }
                }
            )
            stage('Unit Test') {
                sh "./gradlew test"
            }
            stage('Integration Test') {
                sh "./gradlew integration"
            }
            stage('Docker build and Scan') {
                container('docker') {
                    sh "#!/bin/sh -e\ndocker login $registry -u 00000000-0000-0000-0000-000000000000 -p $acrLoginToken"
                    dir("pipe-http-server-cloud") {
                        sh "docker build -t ${integrationImage} ."
                    }

                    sh "docker run --rm  -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.cache/trivy:/root/.cache/trivy knqyf263/trivy:0.1.2 --quiet --ignore-unfixed $integrationImage"

                    sh "docker push ${integrationImage}"
                }
            }
            stage ('Isolated System test') {
                isolatedSystemTest(MP_AQUEDUCT_PIPE_IMAGE_VERSION: "integration-${scmVars.GIT_COMMIT.toString()}")
            }
        }

        def gitBranch = sh(returnStdout: true, script: "git branch | grep \\* | cut -d ' ' -f2").trim()
        if (gitBranch == "master") {

            container('docker') {
                sh "#!/bin/sh -e\ndocker login $registry -u 00000000-0000-0000-0000-000000000000 -p $acrLoginToken"

                stage('Push Aqueduct Pipe') {
                    sh "docker tag ${integrationImage} ${stableImage}"
                    sh "docker push ${stableImage}"
                }
            }

            stage('Deploy Aqueduct Pipe') {
                unstash 'deployment-manifest'

                withEnv(["IMAGE=$stableImage",
                         "SERVER=$properties.databaseHost",
                         "DATABASE=$properties.databaseName",
                         "USERNAME=$properties.databaseUsername",
                         "PASSWORD=$properties.databasePassword",
                         "PIPE_URL=https://api-ppe.tesco.com/messaging/v1",
                         "PIPE_READ_SECURITY_ENABLED=true",
                         "PIPE_READ_USERNAME=$pipeReadUsername",
                         "PIPE_READ_PASSWORD=$pipeReadPassword",
                         "RUNSCOPE_PIPE_READ_USERNAME=$runscopePipeReadUsername",
                         "RUNSCOPE_PIPE_READ_PASSWORD=$runscopePipeReadPassword",
                         "SUPPORT_USERNAME=$supportUsername",
                         "SUPPORT_PASSWORD=$supportPassword"
                ]) {

                    sh "/usr/bin/envsubst < aqueduct-pipe-deployment.yaml > aqueduct-pipe-deployment-sub.yaml"
                }

                sh "kubectl apply -f aqueduct-pipe-deployment-sub.yaml"
            }

            def version = readFile(file:"VERSION.txt")

            stage('Version Test') {
                versionTest("https://api-ppe.tesco.com/messaging/v1/pipe/_status", version)
            }

            container('docker') {
                sh "#!/bin/sh -e\ndocker login $registry -u 00000000-0000-0000-0000-000000000000 -p $acrLoginToken"

                stage('Tag Deployed Image') {
                    sh "docker tag ${stableImage} ${deployedImage}"
                    sh "docker push ${deployedImage}"
                }
            }

            stage("Release") {
                sshagent(credentials: ['public_github_key']) {
                    sh "#!/bin/sh -e\n./gradlew release -Prelease.disableChecks -Prelease.pushTagsOnly"
                }
            }

            stage("Publish") {
                sh "#!/bin/sh -e\n./gradlew publish -PmavenUser=${nexusUsername} -PmavenPassword=${nexusPassword}"
            }

            node('jenkins-live-deployer') {
                String liveRegistry = "${env.company}${env.project}${env.environment}acr${env.tag}.azurecr.io"
                String liveAcrLoginToken = authenticate([environment: env.environment,
                                                         tag: env.tag,
                                                         project: env.project,
                                                         company: env.company,
                                                         location: env.location]) {

                    properties = databaseProperties()

                    pipeReadUsername = getKubeSecret("pipe.read", "username")
                    pipeReadPassword = getKubeSecret("pipe.read", "password")
                    runscopePipeReadUsername = getKubeSecret("runscope.pipe.read", "username")
                    runscopePipeReadPassword = getKubeSecret("runscope.pipe.read", "password")
            }

                String liveStableImage = "$liveRegistry/aqueduct-pipe:stable-${scmVars.GIT_COMMIT}"

                stage('Push Aqueduct Pipe to Live') {
                    container('docker') {
                        sh "#!/bin/sh -e\ndocker login $registry -u 00000000-0000-0000-0000-000000000000 -p $acrLoginToken"
                        sh "docker pull ${deployedImage}"
                        sh "#!/bin/sh -e\ndocker login $liveRegistry -u 00000000-0000-0000-0000-000000000000 -p $liveAcrLoginToken"
                        sh "docker tag ${deployedImage} ${liveStableImage}"
                        sh "docker push ${liveStableImage}"
                    }
                }

                stage('Deploy Aqueduct Pipe to Live') {

                    unstash 'deployment-manifest'
                    withEnv(["IMAGE=$stableImage",
                             "SERVER=$properties.databaseHost",
                             "DATABASE=$properties.databaseName",
                             "USERNAME=$properties.databaseUsername",
                             "PASSWORD=$properties.databasePassword",
                             "PIPE_URL=https://api.tesco.com/messaging/v1",
                             "PIPE_READ_SECURITY_ENABLED=true",
                             "PIPE_READ_USERNAME=$pipeReadUsername",
                             "PIPE_READ_PASSWORD=$pipeReadPassword",
                             "RUNSCOPE_PIPE_READ_USERNAME=$runscopePipeReadUsername",
                             "RUNSCOPE_PIPE_READ_PASSWORD=$runscopePipeReadPassword",
                             "SUPPORT_USERNAME=$supportUsername",
                             "SUPPORT_PASSWORD=$supportPassword"
                    ]) {

                        sh "/usr/bin/envsubst < aqueduct-pipe-deployment.yaml > aqueduct-pipe-deployment-sub.yaml"
                    }

                    sh "kubectl apply -f aqueduct-pipe-deployment-sub.yaml"
                }

                stage('Version Test Live') {
                    versionTest("https://api.tesco.com/messaging/v1/pipe/_status", version)
                }

                stage('Tag Latest Live') {
                    container("docker") {

                        String liveDeployedImage = "$liveRegistry/aqueduct-pipe:latest"

                        sh "#!/bin/sh -e\ndocker login $liveRegistry -u 00000000-0000-0000-0000-000000000000 -p $liveAcrLoginToken"

                        sh "docker tag ${liveStableImage} ${liveDeployedImage}"
                        sh "docker push ${liveDeployedImage}"
                    }
                }
            }
        } else {
            stage("GitHub Status") {
                publicGithubStatusUpdate("aqueduct-core", "success", scmVars.GIT_COMMIT)
            }
        }
    }
}
