micronaut:
  metrics.binders:
    jvm.enabled: true
    web.enabled: true
    processor.enabled: true
    jdbc.enabled: false
  security:
    enabled: true
    token.jwt:
      enabled: true
      bearer.enabled: true
  caches:
    identity-cache:
      expire-after-write: 10m
    cluster-cache:
      expire-after-write: 1h
  router:
    static-resources:
      swagger:
        paths: classpath:META-INF/swagger
        mapping: /swagger/**
  executors:
    io:
      type: fixed
      nThreads: 20

endpoints:
  all:
    enabled: true
    path: /endpoints
    sensitive: false

persistence:
  compact:
    threshold: 3d
    schedule.cron: "0 14 2 1/1 * ?"
  read:
    limit: 1000
    max-batch-size: 2000000
    retry-after: 10
    read-delay-seconds: 10
    retry-after-with-messages: "${RETRY_AFTER_WITH_MESSAGES:5}"

datasources:
  postgres:
    jdbc-url: "jdbc:postgresql://${POSTGRE_SERVER}/${POSTGRE_DATABASE}"
    username: "${POSTGRE_USERNAME}"
    password: "${POSTGRE_PASSWORD}"
    driver-class-name: org.postgresql.Driver
    maximum-pool-size: 20

authentication:
  users:
    pipe-provider-live:
      password: "${PIPE_READ_PASSWORD}"
    pipe-runscope-live:
      password: "${RUNSCOPE_PIPE_READ_PASSWORD}"
      roles:
        - PIPE_READ
    live-support:
      password: "${SUPPORT_PASSWORD}"
      roles:
        - REGISTRY_DELETE
        - BOOTSTRAP_NODE
        - PIPE_READ
  identity:
    url: "${IDENTITY_URL}"
    validate.token.path: "${IDENTITY_VALIDATE_TOKEN_PATH}"
    issue.token.path: "${IDENTITY_ISSUE_TOKEN_PATH}"
    delay: 500ms
    attempts: 3
    client:
      id: "${IDENTITY_CLIENT_ID}"
      secret: "${IDENTITY_CLIENT_SECRET}"
    users:
      nodeA:
        clientId: "${NODE_A_CLIENT_UID}"
        roles:
          - PIPE_READ
          - REGISTRY_WRITE

location:
  url: "${LOCATION_URL}"
  attempts: 3
  delay: 500ms

pipe:
  server:
    url: "https://api.tesco.com/messaging/v1"